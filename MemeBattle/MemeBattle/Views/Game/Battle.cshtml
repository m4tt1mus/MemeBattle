@{
    ViewBag.Title = "Meme Battle";

}
<div class="container">
    <div class="content row">
        <div class="span10 offset1">

            <div class="text-center">
                <h2 class="">Battle Meme</h2>
                <div class="">Click a Meme to choose a winner.</div>
            </div>

            <div class="battle row" data-bind="foreach: memes, visible: !loading()">
                <div class="meme span4" data-bind="dataDash: { name: 'id', content: DisplayName }">
                    <div class="name text-center" data-bind="text: HashTag"></div>
                    <div class="text-center">
                        <img data-bind="img: { pic: PhotoName, baseUrl: $root.imgUrlBase, width: 370 }" />
                    </div>
                </div>
                <div class="vs span2 text-center" data-bind="visible: $index() == 0">
                    VS
                </div>
            </div>

            <div class="row" data-bind="foreach: memes, visible: !loading()">
                <div class="span4 stats" data-bind="css: { offset2: $index() == 1 }">
                    <div class="votes">Votes: <span data-bind="text: Votes"></span></div>
                </div>
            </div>

        </div>
    </div>
</div>

<div class="loading" data-bind="visible: loading()">
    <img src="/content/images/ajax-loader.gif" />
</div>

@section scripts
{
    <script type="text/javascript">

        var ViewModelConstructor = function () {
            self = this;
            self.imgUrlBase = "@Url.Content("~/Images/Memes/")";
            self.memes = null;
            self.loading = ko.observable(true);
        };
        var viewModel = new ViewModelConstructor();

        $(document).ready(function () {
            NewBattle();
            ko.applyBindings(viewModel);
        });

        // Detect when someone chooses the winner
        $(".battle").on('click', '.meme', function (event) {
            // Make sure we aren't handling multiple fast clicks
            if (!viewModel.loading()) {
                viewModel.loading(true);

                // Record vote
                $.ajax("/api/MemeApi/Vote?memeDisplayName=" + $(event.currentTarget).data("id"), {
                    type: 'post',
                }).always(function (data, status, jqXHR) {
                    NewBattle(); // start new battle
                });

            }
        });

        function NewBattle() {
            viewModel.loading(true);

            $.getJSON("/api/MemeApi/GetTwoRandom") // Load the Meme opponents
                .success(function (data) {
                    viewModel.memes = data;
                    PullTwitterInfo();
                })
                .always(function () {
                    viewModel.loading(false);
                });
        }

        function PullTwitterInfo() {
            for (var i = 0; i < viewModel.memes.length; i++) {
                $.post("/api/MemeApi/TwitterFake?" + $.param({ q: viewModel.memes[i].HashTag }))
                    .success(function (data) {
                        GetMemeByHashTag(data[0].SearchTerm).twitter = data;
                    });
            }
        }

        function GetMemeByHashTag(hashtag) {
            var meme = null;
            for (var i = 0; i < viewModel.memes.length; i++) {
                if (viewModel.memes[i].HashTag == hashtag)
                    meme = viewModel.memes[i];
            }
            return meme;
        }
    </script>
}

